//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18052
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace VendorUploadService.ServiceReference1 {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ClaimResult", Namespace="http://schemas.datacontract.org/2004/07/ImportClaimService.DataContracts")]
    [System.SerializableAttribute()]
    public partial class ClaimResult : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private VendorUploadService.ServiceReference1.ClaimDeletionStatus ClaimDeletionStatusField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private VendorUploadService.ServiceReference1.ApexValidationError[] ErrorsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsDuplicateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string VendorClaimIdField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public VendorUploadService.ServiceReference1.ClaimDeletionStatus ClaimDeletionStatus {
            get {
                return this.ClaimDeletionStatusField;
            }
            set {
                if ((this.ClaimDeletionStatusField.Equals(value) != true)) {
                    this.ClaimDeletionStatusField = value;
                    this.RaisePropertyChanged("ClaimDeletionStatus");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public VendorUploadService.ServiceReference1.ApexValidationError[] Errors {
            get {
                return this.ErrorsField;
            }
            set {
                if ((object.ReferenceEquals(this.ErrorsField, value) != true)) {
                    this.ErrorsField = value;
                    this.RaisePropertyChanged("Errors");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsDuplicate {
            get {
                return this.IsDuplicateField;
            }
            set {
                if ((this.IsDuplicateField.Equals(value) != true)) {
                    this.IsDuplicateField = value;
                    this.RaisePropertyChanged("IsDuplicate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string VendorClaimId {
            get {
                return this.VendorClaimIdField;
            }
            set {
                if ((object.ReferenceEquals(this.VendorClaimIdField, value) != true)) {
                    this.VendorClaimIdField = value;
                    this.RaisePropertyChanged("VendorClaimId");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ClaimDeletionStatus", Namespace="http://schemas.datacontract.org/2004/07/Apex.ClaimServices.Contracts")]
    public enum ClaimDeletionStatus : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Deleted = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        ClaimNotFound = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        ClaimWasProcessedCouldNotDelete = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        ClaimWasReimported = 3,
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ApexValidationError", Namespace="http://schemas.datacontract.org/2004/07/ImportClaimService.DataContracts")]
    [System.SerializableAttribute()]
    public partial class ApexValidationError : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ErrorMessageField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private VendorUploadService.ServiceReference1.ErrorLocation[] LocationsField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ErrorMessage {
            get {
                return this.ErrorMessageField;
            }
            set {
                if ((object.ReferenceEquals(this.ErrorMessageField, value) != true)) {
                    this.ErrorMessageField = value;
                    this.RaisePropertyChanged("ErrorMessage");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public VendorUploadService.ServiceReference1.ErrorLocation[] Locations {
            get {
                return this.LocationsField;
            }
            set {
                if ((object.ReferenceEquals(this.LocationsField, value) != true)) {
                    this.LocationsField = value;
                    this.RaisePropertyChanged("Locations");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ErrorLocation", Namespace="http://schemas.datacontract.org/2004/07/ImportClaimService.DataContracts")]
    [System.SerializableAttribute()]
    public partial class ErrorLocation : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string SectionNameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string SectionName {
            get {
                return this.SectionNameField;
            }
            set {
                if ((object.ReferenceEquals(this.SectionNameField, value) != true)) {
                    this.SectionNameField = value;
                    this.RaisePropertyChanged("SectionName");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ApexValidationResponse", Namespace="http://schemas.datacontract.org/2004/07/ImportClaimService.DataContracts")]
    [System.SerializableAttribute()]
    public partial class ApexValidationResponse : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool ClaimWasFoundField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private VendorUploadService.ServiceReference1.ApexValidationError[] ErrorsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string VendorClaimIdField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool ClaimWasFound {
            get {
                return this.ClaimWasFoundField;
            }
            set {
                if ((this.ClaimWasFoundField.Equals(value) != true)) {
                    this.ClaimWasFoundField = value;
                    this.RaisePropertyChanged("ClaimWasFound");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public VendorUploadService.ServiceReference1.ApexValidationError[] Errors {
            get {
                return this.ErrorsField;
            }
            set {
                if ((object.ReferenceEquals(this.ErrorsField, value) != true)) {
                    this.ErrorsField = value;
                    this.RaisePropertyChanged("Errors");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string VendorClaimId {
            get {
                return this.VendorClaimIdField;
            }
            set {
                if ((object.ReferenceEquals(this.VendorClaimIdField, value) != true)) {
                    this.VendorClaimIdField = value;
                    this.RaisePropertyChanged("VendorClaimId");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReference1.IClaimImportService")]
    public interface IClaimImportService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClaimImportService/ImportClaim", ReplyAction="http://tempuri.org/IClaimImportService/ImportClaimResponse")]
        VendorUploadService.ServiceReference1.ClaimResult[] ImportClaim(string username, string password, byte[] claimContent);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClaimImportService/ImportClaim", ReplyAction="http://tempuri.org/IClaimImportService/ImportClaimResponse")]
        System.Threading.Tasks.Task<VendorUploadService.ServiceReference1.ClaimResult[]> ImportClaimAsync(string username, string password, byte[] claimContent);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClaimImportService/DeleteClaim", ReplyAction="http://tempuri.org/IClaimImportService/DeleteClaimResponse")]
        VendorUploadService.ServiceReference1.ClaimDeletionStatus DeleteClaim(string username, string password, string vendorClaimId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClaimImportService/DeleteClaim", ReplyAction="http://tempuri.org/IClaimImportService/DeleteClaimResponse")]
        System.Threading.Tasks.Task<VendorUploadService.ServiceReference1.ClaimDeletionStatus> DeleteClaimAsync(string username, string password, string vendorClaimId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClaimImportService/GetMedicalValidationMessages", ReplyAction="http://tempuri.org/IClaimImportService/GetMedicalValidationMessagesResponse")]
        VendorUploadService.ServiceReference1.ApexValidationResponse GetMedicalValidationMessages(string username, string password, string vendorClaimId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClaimImportService/GetMedicalValidationMessages", ReplyAction="http://tempuri.org/IClaimImportService/GetMedicalValidationMessagesResponse")]
        System.Threading.Tasks.Task<VendorUploadService.ServiceReference1.ApexValidationResponse> GetMedicalValidationMessagesAsync(string username, string password, string vendorClaimId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClaimImportService/GetMultipleMedicalValidationMessages", ReplyAction="http://tempuri.org/IClaimImportService/GetMultipleMedicalValidationMessagesRespon" +
            "se")]
        VendorUploadService.ServiceReference1.ApexValidationResponse[] GetMultipleMedicalValidationMessages(string username, string password, string[] vendorClaimId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClaimImportService/GetMultipleMedicalValidationMessages", ReplyAction="http://tempuri.org/IClaimImportService/GetMultipleMedicalValidationMessagesRespon" +
            "se")]
        System.Threading.Tasks.Task<VendorUploadService.ServiceReference1.ApexValidationResponse[]> GetMultipleMedicalValidationMessagesAsync(string username, string password, string[] vendorClaimId);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IClaimImportServiceChannel : VendorUploadService.ServiceReference1.IClaimImportService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ClaimImportServiceClient : System.ServiceModel.ClientBase<VendorUploadService.ServiceReference1.IClaimImportService>, VendorUploadService.ServiceReference1.IClaimImportService {
        
        public ClaimImportServiceClient() {
        }
        
        public ClaimImportServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public ClaimImportServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ClaimImportServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ClaimImportServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public VendorUploadService.ServiceReference1.ClaimResult[] ImportClaim(string username, string password, byte[] claimContent) {
            return base.Channel.ImportClaim(username, password, claimContent);
        }
        
        public System.Threading.Tasks.Task<VendorUploadService.ServiceReference1.ClaimResult[]> ImportClaimAsync(string username, string password, byte[] claimContent) {
            return base.Channel.ImportClaimAsync(username, password, claimContent);
        }
        
        public VendorUploadService.ServiceReference1.ClaimDeletionStatus DeleteClaim(string username, string password, string vendorClaimId) {
            return base.Channel.DeleteClaim(username, password, vendorClaimId);
        }
        
        public System.Threading.Tasks.Task<VendorUploadService.ServiceReference1.ClaimDeletionStatus> DeleteClaimAsync(string username, string password, string vendorClaimId) {
            return base.Channel.DeleteClaimAsync(username, password, vendorClaimId);
        }
        
        public VendorUploadService.ServiceReference1.ApexValidationResponse GetMedicalValidationMessages(string username, string password, string vendorClaimId) {
            return base.Channel.GetMedicalValidationMessages(username, password, vendorClaimId);
        }
        
        public System.Threading.Tasks.Task<VendorUploadService.ServiceReference1.ApexValidationResponse> GetMedicalValidationMessagesAsync(string username, string password, string vendorClaimId) {
            return base.Channel.GetMedicalValidationMessagesAsync(username, password, vendorClaimId);
        }
        
        public VendorUploadService.ServiceReference1.ApexValidationResponse[] GetMultipleMedicalValidationMessages(string username, string password, string[] vendorClaimId) {
            return base.Channel.GetMultipleMedicalValidationMessages(username, password, vendorClaimId);
        }
        
        public System.Threading.Tasks.Task<VendorUploadService.ServiceReference1.ApexValidationResponse[]> GetMultipleMedicalValidationMessagesAsync(string username, string password, string[] vendorClaimId) {
            return base.Channel.GetMultipleMedicalValidationMessagesAsync(username, password, vendorClaimId);
        }
    }
}
